<?php
// $Id$
/**
 * @files
*  Convio API Module
*  Implemeent's Convio's Single Sign-On and Constituent APIs
*  see http://open.convio.com
*
*  Written by Chris Luther (chris@agileID.com)
*
*  @ingroup convio
*/

// psudoGLOBALS - the drupal way

function myp($item) {
  if(module_exists('drupalforfirebug')) firep($item);
 }

function convio_api_apis() {
   $api_options = array(
                t('Constituent API') => array(
                      'create' => 'create',
                      'createOrUpdate' => 'createOrUpdate',
                      'getGroupMembers' => 'getGroupMembers',
                      'getUser' => 'getUser',
                      'getUserGroups' => 'getUserGroups',
                      'getUserInterests' => 'getUserInterests',
                      'isEmailValid' => 'isEmailValid',
                      'isUserInterested' => 'isUserInterested',
                      'listInterests' => 'listInterests',
                      'listUserFieldChoices' => 'listUserFieldChoices',
                      'listUserFields' => 'listUserFields',
                      'logInteraction' => 'logInteraction',
                      'update' => 'update',
               ),
                t('Single Sign-on') => array(
                      'authenticateUser' => 'authenticateUser',
                      'changePassword' => 'changePassword',
                      'getSingleSignOnToken' => 'getSingleSignOnToken',
                      'login' => 'login',
               ),
                t('Advocacy') => array(
                      'getAdvocacyAlerts' => 'getAdvocacyAlerts',
                      'getAdvocacyInteractions' => 'getAdvocacyInteractions',
                ),
             );
   return $api_options;
}

// HOOKS
/**
 * Implementation of hook_init()
 * General function to include the integration specific files.
 * This hook is run at the beginning of the page request and is used to set up
 * global parameters which are needed later in the request.
 * when this hook is called, all modules are already loaded in memory.
 */

function convio_api_init() {

  myp('convio_api_init() called');

  global $_convio_api_ckeditor;

  $path = drupal_get_path('module', 'convio_api');
  require_once("$path/custom.inc");
  if (module_exists('CKEditor')) {
    $_convio_api_ckeditor = TRUE ;
  }
  else {
    $_convio_api_ckeditor = FALSE;
    variable_set('convio_api_enableCKeditor', 'FALSE');
  };

}

/**
 * Implementation of hook_help().
 *
 * @param $path A Drupal menu router path the help is being requested.
 * @param $arg An array that corresponds to the return of the arg() function.
 * @return A localized string containing the help text.
 */

function convio_api_help($path, $arg) {


/*
  if ($path == 'admin/help#convio') {
    $txt = 'The Convio API module uses the !convio_open_url APIs (Single-Signon and Constituent API) to enable content personalization through the Drupal CMS.';
    $link = l('Convio Open', 'http://open.convio.com/api/');
    $replace = array(
      '!convio_open_url' => $link
    );
    return '<p>'. t($txt, $replace) .'</p>';
  }
*/
}



/**
 * Implementation of hook_user().
 * The user hook is fired when a $user object is successfully loaded from the
 * database in response to a call to user_load(). This happens when a user logs
 * in, when authorship information is being retrieved for a node, and at several
 * other points.
 * @param $op What kind of actions is being performed. Possible values:
 *    after_update,
 *    categories,
 *    delete,
 *    form,
 *    insert,
 *    load,
 *    login,
 *    logout,
 *    register,
 *    submit,
 *    update,
 *    validate,
 *    view
 * @param &$edit The array of form values submitted by the user.
 * @param &$account The user object on which the operation is being performed.
 * @param $category The active category of user information being edited.
*/


function convio_api_user($op, &$edit, &$account, $category = NULL) {
// TODO will need to be updated for Drupal 7
    global $user;

    switch ($op) {

      // a new user is being added; check if we did authentication,
      case 'insert':
        myp('convio_api_user() insert op called.');

        convio_api_createOrUpdate($email,$cons_id,"","","","","","","","","","xml");

      break;

   // Successful user login into Drupal.
    case 'login':
      myp('convio_api_user() login op called');

      $email = $user->mail;
      if(isset($email)) {
        convio_api_update_local_account($email);
      } else {
         myp('user undefined.');
      }

      //$convio_cons_id = $user -> convio_cons_id;
      //myp("$convio_cons_id = ".$convio_cons_id);
      // _convio_api_update_local_account(&$account);
      // _convio_api_sign_in($account, 1);


      // _convio_api_update_local_account(&$account);
      // _convio_api_sign_in($account, 1);
    break;

    // user logsout
    case 'logout':
      myp('convio_api_user() logout op called');

    break;

    // $user object has been created and is given to us as $account parameter.
    /*
    case 'load':
      myp('convio_api_user() load op called - ');

      return;
    break;
   */

    // 'My account' page is being created.
    case 'view':
    // Add a convio fields displaying information.
      myp('convio_api_user() view op called');
      $email = $user->mail;
      convio_api_update_local_account($email);

     break;
  }
}

/**
 * Implementation of hook_menu().
 *
 * @return An array of menu items.
 */
function convio_api_menu() {
  myp('convio_api_menu() called');


  $items = array();

  $items['admin/settings/convio'] = array(
    'title' => 'Convio API Module Settings',
    'description' => t('Configure the connection information for the Convio Affiliate Site'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convio_api_admin'),
    'access callback' => 'user_access',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );


  $items['donate'] = array(
    'title' => 'Donate',
    'description' => t('Represent default donate page from Convio CRM site'),
    'page callback' =>'convio_api_donate',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}



/**
* FORMS
*/
function convio_api_userUpdate() {
  myp('convio_api_userUpdate() called');


/*
 * "<form action='/user/".$user->uid."/convio_api_updateUser();' accept-charset='UTF-8' method='post' id='convio_api-update-form'>
    <input type='submit' name='op' id='convio_api-update-submit' value='Update this information' class='form-submit' />
    </form>";
 */

  $form['convio_api_userUpdate'] = array(
        '#type' => 'submit',
        '#value' => t('Update this information.'),
        '#submit' => array('convio_api_userUpdate_submit'),
  );
}


function convio_api_admin() {
  myp('convio_api_admin() called');


  $form['convio_api_server'] = array(
    '#type' => 'textfield',
    '#title' => 'Convio Server',
    '#default_value' => variable_get('convio_api_server', ''),
    '#size' => 75,
    '#maxlength' => 256,
    '#description' => t('The url reference to the root of the Convio Affiliate site.  Includes protocol, host, and affiliate short name with no trailing slash.  Example: https://secure2.convio.net/shortname'),
    '#required' => TRUE,
  );

  $form['convio_api_ca_verification'] = array(
      '#type' => 'checkbox',
      '#title' => 'Enable SSL Certificate Verification.',
      '#default_value' => variable_get('convio_api_ca_verification', 'FALSE'),
      '#description' => t('Check to enable SSL certificate verification between the Drupal and Convio servers.  See INFO.'),
  );
  $form['convio_api_key'] = array(
      '#type' => 'textfield',
      '#title' => 'Convio API Key',
      '#default_value' => variable_get('convio_api_key', ''),
      '#size' => 75,
      '#maxlength' => 256,
      '#description' => t('The Convio API Key defined in Convio Site Configuration CONVIO_API_KEY.'),
      '#required' => TRUE,
  );
  $form['convio_api_login_name'] = array(
      '#type' => 'textfield',
      '#title' => 'Convio API Administrative Account',
      '#default_value' => variable_get('convio_api_login_name', ''),
      '#size' => 25,
      '#maxlength' => 25,
      '#description' => t('The user_name of the Convio administrative account that was created for API access.'),
      '#required' => TRUE,
  );

  $form['convio_api_login_password'] = array(
      '#type' => 'textfield',
      '#title' => 'Convio API Administrative Password',
      '#default_value' => variable_get('convio_api_login_password', ''),
      '#size' => 25,
      '#maxlength' => 25,
      '#description' => t('The password of the Convio administrative account that was created for API access.'),
      '#required' => TRUE,
  );

  $form['convio_api_enableCKeditor'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable CKeditor Integration?'),
      '#default_value' => variable_get('convio_api_enableCKeditor', 'FALSE'),
  );


  $form['convio_api_test_set'] = array(
        '#title' => t('Connection Testing'),
        '#type' => 'fieldset',
        '#description' => t('To test the connection with the Convio Affiliate server enter either the Convio Account ID OR the primary email of a existing Convio user.'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
  );

  $form['convio_api_test_set']['convio_api_test_id'] = array(
        '#type' => 'textfield',
        '#title' => 'Test Cons_ID',
        '#default_value' => variable_get('convio_api_test_id', ''),
        '#size' => 25,
        '#maxlength' => 25,
  );
  $form['convio_api_test_set']['convio_api_test_email'] = array(
        '#type' => 'textfield',
        '#title' => 'Test Email',
        '#default_value' => variable_get('convio_api_test_email', ''),
        '#size' => 25,
        '#maxlength' => 25,
  );


  $api_options = convio_api_apis();

   $form['convio_api_test_set']['convio_api_test_api'] = array(
        '#title' => t('Select API'),
        '#type' => 'select',
        '#description' => t('Select the API to test.'),
        '#options' => $api_options,
        '#multiple' => FALSE,
        '#default_value' => variable_get('convio_api_test_api', 'getUser'),
    );

    $form['convio_api_test_set']['convio_api_format'] = array(
        '#type' => 'radios',
        '#title' => t('Format result'),
        '#options' => array(
                       'json' => 'json',
                       'xml' => 'xml',
                    ),
        '#default_value' => variable_get('convio_api_format', 'json'),
    );

    $form['convio_api_test_set']['convio_api_test_button'] = array(
        '#type' => 'submit',
        '#value' => t('Test Now'),
        '#submit' => array('convio_api_test_button_submit'),
        '#executes_submit_callback' => TRUE,
  );

  return system_settings_form($form);
}


// Pages

/**
 * Re-presentation of the CRM donate  .
 *
 * @return .
 */
function convio_api_donate() {
  global $ecrm_donate_url;
  header('Location: '.$ecrm_donate_url);
  return;
}

/**
 * This overrides the User form submission and to update eCRM on change  .
 *
 * @return .
 */
function convio_api_updateUser() {
  return t('Howdy Update User!');
}


/**
 * Implementation of hook_form_alter
 * to modify the user_profile_form (and possibly other forms)
 */
/*
 function convio_api_form_alter(&$form, $form_state, $form_id) {
  myp('convio_api_form_alter() called');

  global $usage_terms_text;
  global $usage_terms_checkbox_text;

  switch ($form_id) {
    // the user_profile_form
    case 'user_profile_form':
         if (module_exists(devel)) {
             dsm($form);
            };
    case 'edit-user-profile-form' :
         $form['terms'] = array(
            '#type' => 'fieldset',
            '#title' => t('Usage Policy'),
            '#weight' => 10,
            '#collabsible' => FALSE,
            '#collapsed' => FALSE,
         );

         $form['terms']['terms_text'] = array(
            '#weight' => 0,
            '#value' =>
               '<div style="height: 150px; overflow-y: scroll;">'
               .$usage_terms_text
               .'</div>',
          );
         $form['terms']['terms_checkbox'] = array(
            '#type' => 'checkbox',
            '#title' => $usage_terms_checkbox_text,
          );
    break;
  };
}
*/

/**
 * Reference theme override for user registration
 */

function convio_api_theme($existing, $type, $theme, $path) {
  return array(
    // tell drupal what tempate t use for the user register form
    'user_register' => array(
        'arguments' => array('form' => NULL),
        'template' => 'user-register', // name of the template
        ),
  );
}
/**
* Form Validation routine
*/

/* function convio_api_admin_validate($form, &$form_state) {
    myp('convio_api_admin_validate() called');


  if ($form_state['values']['convio_api_server'] == '') {
    form_set_error('', t('You must enter the URL of the Convio Affiliate site.'));
    drupal_set_message('Convio API Admin Form Validated.');
  }

}
*/

/**
* END HOOKS
*/

/**
* FUNCTIONS
*/


function convio_api_userUpdate_submit() {
/**
* This function connects the current user to the Convio server user page.
*/
  myp('convio_api_userUpdate_submit() called');



}


function convio_api_test_button_submit($form, &$form_state) {
  myp('convio_api_test_button_submit() called');


/**
* This function tests the request parameters with the Convio server.
*/
  $item = '<b>Convio API Test Begun</b>';
  drupal_set_message($item);
  $test_api = $form_state['values']['convio_api_test_api'];
  $test_format = $form_state['values']['convio_api_format'];
  $test_server = variable_get('convio_api_server', '');
  $test_apikey = variable_get('convio_api_key', '');
  $test_account = variable_get('convio_api_login_name', '');
  $test_pw = variable_get('convio_api_login_password', '');
  $test_id = variable_get('convio_api_test_id', NULL);
  $test_email = variable_get('convio_api_test_email', NULL);
  if ($test_id == '') unset($test_id);
  if ($test_email == '') unset($test_email);
  if (!empty($test_id)) { // move into case statements
      drupal_set_message('Testing API using Convio ID = '. $test_id);
    }
    else {
      drupal_set_message('Testing API using Primary Email = '. $test_email);
    }

  switch ($test_api) {
    case 'create' :
      /* TODO need form input:
     * primary_email - Required. The primary email address that uniquely identifies the constituent.
     * add_center_ids - Optional. Comma-separated list of numeric IDs of centers to add the user to.
     * add_group_ids - Optional. Comma-separated list of numeric IDs of groups to add the user to. Only available when called using an administrator account.
     * add_interest_ids - Optional. Comma-separated list of numeric IDs of email interests to add the user to.
     * source - Optional. Text to associate with the record to identify how or from where the record was added. Only used when creating new records.
     * no_welcome - Optional. Only used when creating new records. Specifies whether to send a "welcome" auto- responder email to the new user. If the value is "f" or "FALSE" (ignoring case) and the site is configured to send welcome auto-responders to new users, then one will be sent. By default, this value is "TRUE", meaning that no auto-responder email will be sent.
     * cons_id - Optional. The constituent ID (Convio ID) that uniquely identifies the constituent. This value is automatically assigned when a new constituent record is created.
     * member_id - Optional. The member ID (Client ID) that uniquely identifies the constituent.
     * remove_center_ids - Optional. Comma-separated list of numeric IDs of centers to remove the user from.
     * remove_group_ids - Optional. Comma-separated list of numeric IDs of groups to remove the user from. Only valid when updating records. Only available when called using an administrator account. Cannot be used for pre-defined groups (those with IDs less than 1000). Cannot be used for administrator security groups.
     * remove_interest_ids - Optional. Comma-separated list of numeric IDs of email interests to remove the user from. Only valid when updating records.
     */
      $test_add_center_ids="";
      $test_add_group_ids="";
      $test_add_interest_ids='';
      $test_source='';
      $test_welcome='';
      //          convio_api_create(  $primary_email,  $add_center_ids="" ,  $add_group_ids="" ,  $add_interest_ids='' ,  $source='' ,  $no_welcome='' ,  $format='', $server='' , $apikey='' , $account='' , $pw='' )
        $string = convio_api_create_call($test_email , $test_add_center_ids, $test_add_group_ids, $test_add_interest_ids, $test_source, $test_no_welcome, $test_format , $test_server , $test_apikey , $test_account , $test_pw  );
        drupal_set_message('<b>create():</b>');
        drupal_set_message( $string);
        // make the call
        $test_result = convio_api_create($test_email , $test_add_center_ids, $test_add_group_ids, $test_add_interest_ids, $test_source, $test_no_welcome, $test_format , $test_server , $test_apikey , $test_account , $test_pw  );
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };
    break;

    case 'createOrUpdate' :
        //  TBD need form input:
        $test_member_id = NULL;
        $test_add_center_ids= NULL;
        $test_add_group_ids= NULL;
        $test_add_interest_ids= NULL;
        $test_source= NULL;
        $test_no_welcome= NULL;
        $test_remove_center_ids = NULL;
        $test_remove_group_ids = NULL;
        $test_remove_interest_ids = NULL ;
        //       convio_api_createOrUpdate(      $primary_email,  $cons_id, $member_id,   $add_center_ids,     $add_group_ids,      $add_interest_ids ,
        //                                       $remove_center_ids,     $remove_group_ids,      $remove_interest_ids,      $source,      $no_welcome,
        //                                       $format, $server, $apikey, $account, $pw );
        $string = convio_api_createOrUpdate_call($test_email , $test_id, $test_member_id, $test_add_center_ids, $test_add_group_ids, $test_add_interest_ids,
                                                 $test_remove_center_ids, $test_remove_group_ids, $test_remove_interest_ids, $test_source, $test_no_welcome,
                                                 $test_format , $test_server , $test_apikey , $test_account , $test_pw  );
        drupal_set_message('<b>createOrUpdate():</b>');
        drupal_set_message( $string);
        // make the call
        $test_result = convio_api_createOrUpdate($test_email , $test_id, $test_member_id, $test_add_center_ids, $test_add_group_ids, $test_add_interest_ids,
                                                 $test_remove_center_ids, $test_remove_group_ids, $test_remove_interest_ids, $test_source, $test_no_welcome,
                                                 $test_format , $test_server , $test_apikey , $test_account , $test_pw  );
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };

    break;

    case 'getGroupMembers' :
      // TBD - need form input
       $test_group_id = 100;
       $test_max_number = 10;
       $test_fields=  NULL;
       //         convio_api_getGroupMembers     ( $group_id,      $max_number='' ,  $fields='' ,  $format='' ,  $server='' ,    $apikey='' ,   $account='' ,   $pw='' )
        $string = convio_api_getGroupMembers_call($test_group_id , $test_max_number, $test_fields, $test_format , $test_server , $test_apikey , $test_account , $test_pw  );
        drupal_set_message('<b>getGroupMembers():</b>');
        drupal_set_message( $string);
        // make the call
        $test_result = convio_api_getGroupMembers($test_group_id , $test_max_number, $test_fields, $test_format , $test_server , $test_apikey , $test_account , $test_pw   );
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };
    break;

    case 'getUser':
        //        convio_api_getUser_call( $consid='' , $email='' , $format='' ,  $server='' ,   $apikey='' ,   $account='' ,   $pw='' )
        $string = convio_api_getUser_call($test_id , $test_email , $test_format , $test_server , $test_apikey , $test_account , $test_pw  );
        drupal_set_message('<b>getUser():</b>');
        drupal_set_message( $string);
        // make the call
        $test_result = convio_api_getUser($test_id , $test_email , $test_format , $test_server , $test_apikey , $test_account , $test_pw );
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };
    break;

    case 'getUserGroups':
        $test_member_id = ''; // TBD provide form input
        //        convio_api_getUserGroups(      $consid='' ,$member_id="",$primary_email='',$format='',  $server='' , $apikey='' ,  $account='' ,  $pw='' )
        $string = convio_api_getUserGroups_call( $test_id, $test_member_id, $test_email, $test_format, $test_server, $test_apikey, $test_account, $test_pw );
        drupal_set_message('<b>getUserGroups():</b>');
        drupal_set_message( $string );
        // make the call
        $test_result = convio_api_getUserGroups( $test_id, $test_member_id, $test_email, $test_format, $test_server, $test_apikey, $test_account, $test_pw );
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };
    break;

    case 'getUserInterests':
        //        convio_api_getUserInterests(     $consid='' , $email='' ,    $format='' ,   $server='' ,   $apikey='' ,   $account='' ,   $pw='' )
        $string = convio_api_getUserInterests_call($test_id , $test_email , $test_format , $test_server , $test_apikey , $test_account , $test_pw );
        drupal_set_message('<b>getUserInterests():</b>');
        drupal_set_message( $string );
        // make the call
        $test_result = convio_api_getUserInterests($test_id , $test_email , $test_format , $test_server , $test_apikey , $test_account , $test_pw  );
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };
    break;

   case 'isEmailValid':
        //        convio_api_isEmailValid_call( $email,      $format='' ,   $server='' ,   $apikey='' ,   $account='' ,   $pw='' )
        $string = convio_api_isEmailValid_call( $test_email, $test_format , $test_server , $test_apikey , $test_account , $test_pw ) ;
        drupal_set_message('<b>isEmailValid():</b>');
        drupal_set_message( $string );
        $test_result = convio_api_isEmailValid( $test_email, $test_format , $test_server , $test_apikey , $test_account , $test_pw );
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };
    break;

    case 'isUserInterested':
      // TBD - handle id vs. email and notify in test ui what is being sent
      //          convio_api_isUserInterested_call( $consid='' , $email='' , $format='' , $server='' , $apikey='' , $account='' ,  $pw='' )
        $string = convio_api_getGroupMembers_call($test_id, $test_email, $test_format, $test_server, $test_apikey, $test_account , $test_pw );
        drupal_set_message('<b>getGroupMembers():</b>');
        drupal_set_message( $string );
        $test_result = convio_api_getGroupMembers($test_id, $test_email, $test_format, $test_server, $test_apikey, $test_account , $test_pw );
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };
    break;

   case 'listInterests':
        //TBD add to test ui - possibly
        $test_include_hidden = FALSE;
        //        convio_api_listInterests_call( $include_hidden='' , $format='' ,   $server='' ,   $apikey='' ,   $account='' ,   $pw='' )
        $string = convio_api_listInterests_call( $test_include_hidden, $test_format, $test_server , $test_apikey , $test_account , $test_pw ) ;
        drupal_set_message('<b>listInterests():</b>');
        drupal_set_message( $string );
        $test_result = convio_api_listInterests( $test_include_hidden, $test_format, $test_server , $test_apikey , $test_account , $test_pw ) ;
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };
    break;

    case 'listUserFieldChoices' :
        // TBD add to test ui
        $test_field = "name.title";
        drupal_set_message('Testing API using field = '. $test_field);
        //        convio_api_listUserFieldChoices_call( $field ,      $format='' ,   $server='' ,   $apikey='' ,   $account='' ,   $pw='' )
        $string = convio_api_listUserFieldChoices_call( $test_field , $test_format , $test_server , $test_apikey , $test_account , $test_pw ) ;
        drupal_set_message('<b>listUserFieldChoices:</b>');
        drupal_set_message( $string );
        $test_result = convio_api_listUserFieldChoices( $test_field , $test_format , $test_server , $test_apikey , $test_account , $test_pw ) ;
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0] ;
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };
    break;

    case 'listUserFields' :
       //  TBD - possibly add $test_access to test ut
       $test_access = NULL;
       //         convio_api_listUserFields_call( $access='' ,   $format='' ,   $server='' ,  $apikey='' ,  $account='' ,  $pw=''
        $string = convio_api_listUserFields_call( $test_access , $test_format , $test_server, $test_apikey, $test_account, $test_pw) ;
        drupal_set_message('<b>listUserFields:</b>');
        drupal_set_message( $string );
        $test_result = convio_api_listUserFields( $test_access , $test_format , $test_server, $test_apikey, $test_account, $test_pw) ;
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };
    break;

    case 'logInteraction' :
       //  TBD - possibly add $test_access to test ut
       $test_member_id = NULL;
       $test_interaction_subject = 'Test_Subject_Heading';
       $test_interaction_body = NULL;
       $test_interaction_cat_id = NULL;
       $test_interaction_count = NULL;
       drupal_set_message('Testing API using interaction_subject = Test_Subject_Heading');

       //         convio_api_logInteraction     ( $primary_email='', $cons_id='', $member_id='',
       //                                    $interaction_subject , $interaction_body='', $interaction_cat_id='', $interaction_count='',
       //                                    $format='' , $server='' , $apikey='' , $account='' , $pw='' )
        $string = convio_api_logInteraction_call( $test_email , $test_id, $test_member_id,
                                            $test_interaction_subject , $test_interaction_body, $test_interaction_cat_id, $test_interaction_count,
                                            $test_format , $test_server, $test_apikey, $test_account, $test_pw) ;
        drupal_set_message('<b>logInteraction:</b>');
        drupal_set_message( $string );
        $test_result = convio_api_logInteraction( $test_email , $test_id, $test_member_id,
                                            $test_interaction_subject , $test_interaction_body, $test_interaction_cat_id, $test_interaction_count,
                                            $test_format , $test_server, $test_apikey, $test_account, $test_pw) ;
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };
    break;

    case 'update' :
        //  TBD need form input:
        $test_member_id = NULL;
        $test_add_center_ids= NULL;
        $test_add_group_ids= NULL;
        $test_add_interest_ids= NULL;
        $test_remove_center_ids = NULL;
        $test_remove_group_ids = NULL;
        $test_remove_interest_ids = NULL ;
        //       convio_api_createOrUpdate(      $primary_email,  $cons_id, $member_id,   $add_center_ids,     $add_group_ids,      $add_interest_ids ,
        //                                       $remove_center_ids,     $remove_group_ids,      $remove_interest_ids,
        //                                       $format, $server, $apikey, $account, $pw );
        $string = convio_api_update_call($test_email , $test_id, $test_member_id, $test_add_center_ids, $test_add_group_ids, $test_add_interest_ids,
                                                 $test_remove_center_ids, $test_remove_group_ids, $test_remove_interest_ids,
                                                 $test_format , $test_server , $test_apikey , $test_account , $test_pw  );
        drupal_set_message('<b>update():</b>');
        drupal_set_message( $string);
        // make the call
        $test_result = convio_api_update($test_email , $test_id, $test_member_id, $test_add_center_ids, $test_add_group_ids, $test_add_interest_ids,
                                                 $test_remove_center_ids, $test_remove_group_ids, $test_remove_interest_ids,
                                                 $test_format , $test_server , $test_apikey , $test_account , $test_pw  );
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };

    break;

    case 'authenticateUser' :
            // TBD - how to show test?
            // convio_api_authenticateUser( $format='' , $server='' , $apikey='' , $account='' , $pw='')
            drupal_set_message($test_api .' can not be demonstrated via the Adminstrative UI.', 'warning');
    break;

    case 'changePassword' :
           // TBD how to show test?
           //convio_api_changePassword( $old_password, $user_password, $retype_password, $reminder_hint, $format='' , $server='' , $apikey='' , $account='' , $pw='' )
           drupal_set_message($test_api .' can not be demonstrated via the Adminstrative UI.', 'warning');
    break;

    case 'getSingleSignOnToken' :
        //  TBD need form input:
        $test_member_id = NULL;

        //        convio_api_getSingleSignOnToken     (  $cons_id ='', $member_id ='' , $format=''   , $server=''   , $apikey=''   , $account=''   , $pw='')
        $string = convio_api_getSingleSignOnToken_call($test_id , $test_member_id, $test_format , $test_server , $test_apikey , $test_account , $test_pw );
        drupal_set_message('<b>getSingleSignOnToken():</b>');
        drupal_set_message( $string);
        // make the call
        $test_result = convio_api_getSingleSignOnToken($test_id , $test_member_id, $test_format , $test_server , $test_apikey , $test_account , $test_pw );
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };

    break;

    case 'login' :
        //  TBD need form input:
        $test_user_name = NULL;
        $test_password = NULL ;
        $test_send_user_name = NULL ;
        $test_email = NULL;
        $test_logout = NULL;

         //       convio_api_login     ( $user_name ='' , $password ='' , $send_user_name = '', $email = '', $logout = '',
         //                              $format=''   , $server=''   , $apikey=''   , $account=''   , $pw='')
        $string = convio_api_login_call($test_user_name , $test_password, $test_send_user_name, $test_email, $test_logout,
                                         $test_format , $test_server , $test_apikey , $test_account , $test_pw );
        drupal_set_message('<b>login():</b>');
        drupal_set_message( $string);
        // make the call
        $test_result = convio_api_login($test_user_name , $test_password, $test_send_user_name, $test_email, $test_logout,
                                         $test_format , $test_server , $test_apikey , $test_account , $test_pw );
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };
    break;

    case 'getAdvocacyAlerts' :
        // TBD need form input
        $test_list_record_offset = NULL;
        $test_list_page_offset = NULL;
        $test_issue_id = NULL;
        $test_alert_status = 'ACTIVE';
        $test_alert_type = 'ACTION';
        $test_publish = NULL;
        $test_expire = NULL;
       // convio_api_getAdvocacyAlerts             ( $list_record_offset ='' , $list_page_offset ='' , $issue_id = '', $alert_status, $alert_type, $publish = '' , $expire = '',
      //                                  $format='' , $server='' , $apikey='' , $account='' , $pw='' )
        $string = convio_api_getAdvocacyAlerts_call($test_list_record_offset , $test_list_page_offset, $test_issue_id, $test_alert_status, $test_alert_type, $test_publish, $test_expire,
                                         $test_format , $test_server , $test_apikey , $test_account , $test_pw );
        drupal_set_message('<b>getAdvocacyAlerts():</b>');
        drupal_set_message( $string);
        // make the call
        $test_result = convio_api_getAdvocacyAlerts($test_record_offset , $test_list_page_offset, $test_issue_id, $test_alert_status, $test_alert_type, $test_publish, $test_expire,
                                         $test_format , $test_server , $test_apikey , $test_account , $test_pw );
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };
    break;

    case 'getAdvocacyInteractions' :
       // TBD - need form input
       $test_list_record_offset = NULL;
       $test_list_page_offset = NULL;
       $test_page_size = NULL;
       $test_issue_id = NULL;

       //         convio_api_getAdvocacyInteractions     ( $cons_id, $list_record_offset ='' , $list_page_offset ='' , $list_page_size = '', $issue_id = '',
       //                                 $format='' , $server='' , $apikey='' , $account='' , $pw=''  )
        $string = convio_api_getAdvocacyInteractions_call($test_id , $test_list_record_offset , $test_list_page_offset, $test_page_size, $test_issue_id,
                                         $test_format , $test_server , $test_apikey , $test_account , $test_pw );
        drupal_set_message('<b>getAdvocacyInteractions():</b>');
        drupal_set_message( $string);
        // make the call
        $test_result = convio_api_getAdvocacyInteractions($test_id , $test_list_record_offset , $test_list_page_offset, $test_page_size, $test_issue_id,
                                         $test_format , $test_server , $test_apikey , $test_account , $test_pw);
        if ($test_result[0] != FALSE) {
            drupal_set_message('<b>Response:</b>');
            $test_format == 'xml' ? $response = '<pre>'. htmlentities($test_result[0]) .'</pre>' : $response = $test_result[0];
            drupal_set_message($response);
        }
        else {
            drupal_set_message( $test_result[1] , 'error');
        };
    break;

    default :
      drupal_set_message($test_api .' has not yet been implemented', 'warning');
    break;

  }
}

/**
 * _convio_api_update_local_account
 * @param $user_obj
 * @param $save_to_session
 * @return unknown_type
 */

  function convio_api_update_local_account($email) {
      myp('convio_api_update_local_account() called for email =' .$email);
/*      $result = convio_api_getUser("",$email, "xml");
      dargs($result);
      $me = $result[0];
      dargs($me);
/*
      if ($me != FALSE) {
              libxml_use_internal_errors(true);
              $me =  "<?xml version='1.0' standalone='yes'?>\n" .$me; // well formed
              $xml = new SimpleXMLElement($me);
              // @TODO Verify that this error handling works
              if(!$xml) {
                    drupal_set_message("<p>Failed loading XML</p>", $type = 'error');
                    foreach(libxml_get_errors() as $error) {
                        $item = "<p>" .$error->message ."</p>.";
                        drupal_set_message($item , $type = 'error');
                    }
              } else {
              // @TODO expose this in the custom.inc
              // update the local

                $user->convio_name_title       = $xml->name_title;
                $user->convio_name_first       = $xml->name_first;
                $user->convio_name_middle      = $xml->name_middle;
                $user->convio_name_last        = $xml->name_last;
                $user->convio_name_suffix      = $xml->name_suffix;
                $user->convio_name_prof_suffix = $xml->name_prof_suffix;
                $user->convio_interest_label   = $xml->interest_label;
                $user->convio_accepts_postal_mail = $xml->accepts_postal_mail;
                $user->convio_preferred_phone  = $xml->preferred_phone;
                $user->convio_home_phone       = $xml->home_phone;
                $user->convio_mobile_phone     = $xml->mobile_phone;
                $user->convio_work_phone       = $xml->work_phone;
                $user->convio_primary_address  = $xml->primary_address;
                $user->convio_home_street1     = $xml->home_street1;
                $user->convio_home_street2     = $xml->home_street2;
                $user->convio_home_city        = $xml->home_city;
                $user->convio_home_zip         = $xml->home_zip;
                $user->convio_home_country     = $xml->home_country;
                $user->convio_member_id        = $xml->member_id;
                $user->convio_user_name        = $xml->user_name;
                $user->convio_cons_id          = $xml->cons_id;

              }
      }
      else {
            drupal_set_message( $result[1] , 'error');
      };
 */
}

function convio_api_http_status_code_string($code, $include_code=FALSE) {
    // Utility function for listing type of error.
    // Source: http://en.wikipedia.org/wiki/List_of_HTTP_status_codes
    myp('convio_api_http_status_code_string() called');


    switch ($code ) {
        // 1xx Informational
        case 100: $string = 'Continue'; break;
        case 101: $string = 'Switching Protocols'; break;
        case 102: $string = 'Processing'; break; // WebDAV
        case 122: $string = 'Request-URI too long'; break; // Microsoft

        // 2xx Success
        case 200: $string = 'OK'; break;
        case 201: $string = 'Created'; break;
        case 202: $string = 'Accepted'; break;
        case 203: $string = 'Non-Authoritative Information'; break; // HTTP/1.1
        case 204: $string = 'No Content'; break;
        case 205: $string = 'Reset Content'; break;
        case 206: $string = 'Partial Content'; break;
        case 207: $string = 'Multi-Status'; break; // WebDAV

        // 3xx Redirection
        case 300: $string = 'Multiple Choices'; break;
        case 301: $string = 'Moved Permanently'; break;
        case 302: $string = 'Found'; break;
        case 303: $string = 'See Other'; break; //HTTP/1.1
        case 304: $string = 'Not Modified'; break;
        case 305: $string = 'Use Proxy'; break; // HTTP/1.1
        case 306: $string = 'Switch Proxy'; break; // Depreciated
        case 307: $string = 'Temporary Redirect'; break; // HTTP/1.1

        // 4xx Client Error
        case 400: $string = 'Bad Request'; break;
        case 401: $string = 'Unauthorized'; break;
        case 402: $string = 'Payment Required'; break;
        case 403: $string = 'Forbidden'; break;
        case 404: $string = 'Not Found'; break;
        case 405: $string = 'Method Not Allowed'; break;
        case 406: $string = 'Not Acceptable'; break;
        case 407: $string = 'Proxy Authentication Required'; break;
        case 408: $string = 'Request Timeout'; break;
        case 409: $string = 'Conflict'; break;
        case 410: $string = 'Gone'; break;
        case 411: $string = 'Length Required'; break;
        case 412: $string = 'Precondition Failed'; break;
        case 413: $string = 'Request Entity Too Large'; break;
        case 414: $string = 'Request-URI Too Long'; break;
        case 415: $string = 'Unsupported Media Type'; break;
        case 416: $string = 'Requested Range Not Satisfiable'; break;
        case 417: $string = 'Expectation Failed'; break;
        case 422: $string = 'Unprocessable Entity'; break; // WebDAV
        case 423: $string = 'Locked'; break; // WebDAV
        case 424: $string = 'Failed Dependency'; break; // WebDAV
        case 425: $string = 'Unordered Collection'; break; // WebDAV
        case 426: $string = 'Upgrade Required'; break;
        case 449: $string = 'Retry With'; break; // Microsoft
        case 450: $string = 'Blocked'; break; // Microsoft

        // 5xx Server Error
        case 500: $string = 'Internal Server Error'; break;
        case 501: $string = 'Not Implemented'; break;
        case 502: $string = 'Bad Gateway'; break;
        case 503: $string = 'Service Unavailable'; break;
        case 504: $string = 'Gateway Timeout'; break;
        case 505: $string = 'HTTP Version Not Supported'; break;
        case 506: $string = 'Variant Also Negotiates'; break;
        case 507: $string = 'Insufficient Storage'; break; // WebDAV
        case 509: $string = 'Bandwidth Limit Exceeded'; break; // Apache
        case 510: $string = 'Not Extended'; break;

        // Unknown code:
        default: $string = 'Unknown';  break;
    }
    if ($include_code )
        return $code . ' '. $string;
    return $string;
}

function _CONSTITUENT_API() {
  // ONLY FOR THE OUTLINER
}

function convio_api_create_call( $primary_email, $add_center_ids="" , $add_group_ids="" , $add_interest_ids='' , $source='' , $no_welcome='' ,
                                 $format='', $server='' , $apikey='' , $account='' , $pw='' ) {
   // CAPI 1
  myp('convio_api_create_call() called');
    /* TBD need form input:
     *
     * https://secure2.convio.net/organization/site/SRConsAPI?method=create
     * & api_key =value
     * [ & response_format =xml |json ]
     * & v =value [ & suppress_response_codes =value ]
     * & login_name =value & login_password =value
     * & primary_email =value
     * [ & add_center_ids =value ]
     * [ & add_group_ids =value ]
     * [ & add_interest_ids =value ]
     * [ & source =value ]
     * [ & no_welcome =value ]
    */
    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=create';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);
    if (!empty($primary_email)) {
          $v_primary_email = '&primary_email='. $primary_email;
        }
        else {
          return "ERROR: convio_api_create_call() - primary_email not provided";
        };
    !empty($add_center_ids) ? $v_add_center_ids = '&add_center_ids='. $add_center_ids : $v_add_center_ids = '';
    !empty($add_group_ids) ? $v_add_group_ids = '&add_group_ids='. $add_group_ids : $v_add_group_ids = '';
    !empty($add_interest_ids) ? $v_add_interest_ids = '&add_interest_ids='. $add_interest_ids : $v_add_interest_ids = '';
    !empty($source) ? $v_source ='&source='. $source : $v_source = '';
    !empty($no_welcome) ? $v_no_welcome = '&no_welcome'. $no_welcome : $v_no_welcome = '';

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_primary_email . $add_center_ids . $add_group_ids . $add_interest_ids . $source . $no_welcome ;
    return "$string";
}

function convio_api_create( $primary_email, $add_center_ids="" , $add_group_ids="" , $add_interest_ids='' , $source='' , $no_welcome='' ,
                            $format='', $server='' , $apikey='' , $account='' , $pw='' ) {
  myp('convio_api_create() called');

    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl verification
    $api = convio_api_create_call( $primary_email, $add_center_ids, $add_group_ids, $add_interest_ids, $source, $no_welcome, $format, $server, $apikey , $account , $pw);
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }

    return $result;
}


function convio_api_createOrUpdate_call( $primary_email='' , $cons_id='' , $member_id='' ,
                                         $add_center_ids='' , $add_group_ids='' , $add_interest_ids='' ,
                                         $remove_center_ids='' , $remove_group_ids='' , $remove_interest_ids='',
                                         $source='' , $no_welcome='' ,
                                         $format='', $server='', $apikey='', $account='', $pw='' ) {
   // CAPI 2
  $item = 'convio_api_createOrUpdate_call() called';

     /*
     * https://secure2.convio.net/organization/site/SRConsAPI?method=createOrUpdate
     * & api_key =value [ & response_format =xml |json ]
     * & v =value [ & suppress_response_codes =value ]
     * & login_name =value & login_password =value
     * [ & cons_id =value ]
     * [ & member_id =value ]
     * [ & primary_email =value ]
     * [ & add_center_ids =value ]
     * [ & add_group_ids =value ]
     * [ & add_interest_ids =value ]
     * [ & remove_center_ids =value ]
     * [ & remove_group_ids =value ]
     * [ & remove_interest_ids =value ]
     * [ & source =value ]
     * [ & no_welcome =value ]
    */
    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=createOrUpdate';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);
    !empty($cons_id) ? $v_cons_id = '&cons_id='. $cons_id : $v_cons_id = '';
    !empty($member_id) ? $v_member_id = '&member_id='. $member_id : $v_member_id = '';
    !empty($primary_email) ? $v_primary_email = '&primary_email='. $primary_email : $v_primary_email = '';
    !empty($add_center_ids) ? $v_add_center_ids = '&add_center_ids='. $add_center_ids : $v_add_center_ids = '';
    !empty($add_group_ids) ? $v_add_group_ids = '&add_group_ids='. $add_group_ids : $v_add_group_ids = '';
    !empty($add_interest_ids) ? $v_add_interest_ids = '&add_interest_ids='. $add_interest_ids : $v_add_interest_ids = '';
    !empty($remove_center_ids) ? $v_remove_center_ids = '&remove_center_ids='. $remove_center_ids : $v_remove_center_ids = '';
    !empty($remove_group_ids) ? $v_remove_group_ids = '&remove_group_ids='. $remove_group_ids : $v_remove_group_ids ='';
    !empty($remove_interest_ids) ? $v_remove_interest_ids = '&remove_interest_ids='. $remove_interest_ids : $v_remove_interest_ids = '';
    !empty($source) ? $v_source ='&source='. $source : $v_source = '';
    !empty($no_welcome) ? $v_no_welcome = '&no_welcome'. $no_welcome : $v_no_welcome = '';

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_cons_id . $v_member_id . $v_primary_email . $v_add_center_ids
              . $v_add_group_ids . $v_add_interest_ids . $v_remove_center_ids
              . $v_remove_group_ids . $v_remove_interest_ids . $v_source . $v_no_welcome ;
    return "$string";
}

function convio_api_createOrUpdate( $primary_email='' , $cons_id='' , $member_id='' ,
                                    $add_center_ids='' , $add_group_ids='' , $add_interest_ids='' ,
                                    $remove_center_ids='' , $remove_group_ids='' , $remove_interest_ids='',
                                    $source='' , $no_welcome='' ,
                                    $format='', $server='', $apikey='', $account='', $pw='' ) {
  $item = 'convio_api_createOrUpdate() called';

    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl verification
    $api =  convio_api_createOrUpdate_call( $primary_email, $cons_id, $member_id,
                                         $add_center_ids, $add_group_ids, $add_interest_ids ,
                                         $remove_center_ids, $remove_group_ids, $remove_interest_ids,
                                         $source, $no_welcome,
                                         $format, $server, $apikey, $account, $pw );
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }

    return $result;
}

function convio_api_getGroupMembers_call( $group_id, $max_number='' , $fields='' , $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
   // CAPI 3
  $item = 'convio_api_getGroupMembers_call() called';

    /* https://secure2.convio.net/organization/site/SRConsAPI?method=getGroupMembers
     * & api_key =value
     * [ & response_format =xml |json ]
     * & v =value [ & suppress_response_codes =value ]
     * & login_name =value & login_password =value
     * & group_id =value
     * [ & max_number =value ]
     * [ & fields=value ]
    */
    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=getGroupMembers';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);
    if (!empty($group_id)) {
      $v_group_id = '&group_id='. $group_id;
      }
      else {
       return "ERROR: convio_api_getGroupMembers_call() - group_id not provided";
      }
    !empty($max_number) ? $v_max_number = '&max_number='. $max_number : $v_max_number = '';
    !empty($fields) ? $v_fields = '&fields='. $fields : $v_fields = '';

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_group_id . $v_max_number . $v_fields ;
    return "$string";
}

function convio_api_getGroupMembers( $group_id, $max_number='' , $fields='' , $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  // TBD
  $item = 'convio_api_getGroupMembers() called';

    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl verification
    $api = convio_api_getGroupMembers_call( $group_id, $max_number , $fields , $format , $server , $apikey , $account , $pw ); // update when copying
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }

    return $result;
}

function convio_api_getUser_call( $consid='' , $email='' , $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  // CAPI 4
  $item = 'convio_api_getUser_call() called';

  // https://secure2.convio.net/organization/site/SRConsAPI?method=getUser & api_key=value
  // [ & response_format =xml |json ] & v =value [ & suppress_response_codes =value ]
  // & login_name =value & login_password =value [ & cons_id =value ]
  // [ & member_id =value ] [ & primary_email =value ] [ & fields =value ]
    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=getUser';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);
    if (!empty($consid)) {
      $v_consid = '&cons_id='. $consid;
      }
      else {
      $v_consid = '';
      }
    if (!empty($email)) {
      $v_email = '&primary_email='. $email;
      }
      else {
      $v_email = '';
      }

    // build URL string
    $getUser = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_consid . $v_email ;
    return "$getUser";
}

/*
 * convio_api_getUser()
 *
 * This method returns a single constituent record.
 *
 * @param type $consid
 *  Optional. The constituent ID (Convio ID) that uniquely identifies the
 *  constituent. At least one unique identifier parameter is required.
 * @param type $email
 *  Optional. The primary email address that uniquely identifies the
 *  constituent. At least one unique identifier parameter is required.
 * @param type $format
 *  Optional. Used to specify either XML or JSON formatting for the response.
 *  By default, uses setting from Convio Admin panel.
 * @param type $server
 *   Optional. The Convio server. By default, uses setting from
 *   Convio Admin panel.
 * @param type $apikey
 *   Optional. An arbitrary value that must be passed when invoking the Convio
 *   Client and Server APIs. The value passed by the caller must match the value
 *   in the CONVIO_API_KEY site configuration parameter, which is unique for
 *   each Convio site. By default, uses setting from Convio Admin panel.
 * @param type $account
 *   Optional. The user_name of the Convio administrative account that was
 *   created for API access. Note that this must be a special administrator
 *   account used just for API access. By defaul, uses setting from Convio Admin
 *   panel.
 * @param type $pw
 *   Optional. The password of the Convio administrative account that was
 *   created for API access. Note that this must be a special administrator
 *   account used just for API access. By defaul, uses setting from Convio Admin
 *   panel.
 * @return
 *   The requested user record in either XML or JSON format.
 *
 */

function convio_api_getUser( $consid='' , $email='' , $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
    $item = 'convio_api_getUser() called';


    // place the call to the Convio server
    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl verification - TBD (is it ever turned on?)
    $getUser = convio_api_getUser_call(  $consid, $email, $format, $server, $apikey, $account, $pw);
    myp("Trying " .$getUser);
    try {
         // Things that didn't work
         // Tried feed into SimpleXML object - error -  API requires POST
         //    $user = simplexml_load_file($getUser);
         // Tried using http post - error - requires HTTPS
         //   http_post_data($getUser);

         // try curl - create a new cURL resource and set to POST
        $ch = curl_init($getUser);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);
    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }
    return $result;

}

function convio_api_getUserGroups_call( $consid='' , $member_id="" , $primary_email='' , $format='' , $server='' , $apikey='' , $account='' , $pw=''  ) {
   // CAPI 5
  $item = 'convio_api_getUserGroups_call() called';

    /* https://secure2.convio.net/organization/site/SRConsAPI?method=getUserGroups
     * & api_key =value
     * [ & response_format =xml |json ]
     * & v =value [ & suppress_response_codes =value ]
     * & login_name =value & login_password =value
     * [ & cons_id =value ]
     * [ & member_id =value ]
     * [ & primary_email=value ]
    */
    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=getUserGroups';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);
    if (!empty($consid)) {
      $v_consid = '&cons_id='. $consid;
      }
      else {
      $v_consid = '';
      };

      if (!empty($member_id_email)) {
      $v_member_id = '&member_id='. $member_id;
      }
      else {
      $v_member_id = '';
      };

      if (!empty($primary_email)) {
      $v_primary_email = '&primary_email='. $primary_email;
      }
      else {
      $v_primary_email = '';
      };

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_consid . $_v_member_id . $v_primary_email ;
    return "$string";
}

function convio_api_getUserGroups( $consid='' , $member_id="" , $primary_email='' , $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  $item = 'convio_api_getUserGroups() called';

    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl verification
    $api = convio_api_getUserGroups_call( $consid, $member_id, $primary_email, $format, $server, $apikey, $account, $pw ); // update when copying
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }

    return $result;
}

function convio_api_getUserInterests_call( $consid='' , $email='' , $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  // CAPI 6
  $item = 'convio_api_getUserInterest_call() called';


  // https://secure2.convio.net/organization/site/SRConsAPI?method=getUserInterests & api_key=value
  // [ & response_format =xml |json ] & v =value [ & suppress_response_codes =value ]
  // & login_name =value & login_password =value [ & cons_id =value ]
  // [ & member_id =value ] [ & primary_email =value ] [ & fields =value ]
    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=getUserInterests';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);
    if (!empty($consid)) {
      $v_consid = '&cons_id='. $consid;
      }
      else {
      $v_consid = '';
      }
    if (!empty($email)) {
      $v_email = '&primary_email='. $email;
      }
      else {
      $v_email = '';
      }

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_consid . $v_email ;
    return "$string";
}

function convio_api_getUserInterests( $consid='' , $email='' , $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  $item = 'convio_api_getUserIntersts() called';


    // place the call to the Convio server
    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl
    $api = convio_api_getUserInterests_call( $consid, $email, $format, $server, $apikey, $account, $pw );
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }

    return $result;
}

function convio_api_isEmailValid_call( $email, $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  // CAPI 7
  $item = 'convio_api_isEmailValid_call() called';


  /* https://secure2.convio.net/organization/site/SRConsAPI?method=isEmailValid
   * & api_key =value
   * [ & response_format =xml |json ]
   * & v =value [ & suppress_response_codes =value ]
   * & login_name =value &login_password=value
   * &email=value
  */
    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=isEmailValid';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);
    if (!empty($email)) {
      $v_email = '&email='. $email;
      }
      else {
      return "ERROR: convio_api_isEmailValid_call() - email not provided";
      }

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_email ;
    return "$string";
}

function convio_api_isEmailValid( $email, $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  $item = 'convio_api_isEmailValid() called';

    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl
    $api = convio_api_isEmailValid_call( $email, $format, $server, $apikey, $account, $pw );
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }
    return $result;
}

function convio_api_isUserInterested_call( $consid='' , $email='' , $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  // CAPI 8
  $item = 'convio_api_isUserInterested_call() called';


  /* https://secure2.convio.net/organization/site/SRConsAPI?method=isUserInterested
   * & api_key =value
   * [ & response_format =xml |json ]
   * & v =value [ & suppress_response_codes =value ]
   * & login_name=value &login_password=value
  */
    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=isUserInterested';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);
    if (!empty($consid)) {
      $v_consid = '&cons_id='. $consid;
      }
      else {
      $v_consid = '';
      }
    if (!empty($email)) {
      $v_email = '&primary_email='. $email;
      }
      else {
      $v_email = '';
      }

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_consid . $v_email ;
    return "$string";
}

function convio_api_isUserInterested( $consid='' , $email='' , $format='' , $server='' , $apikey='' , $account='' , $pw='') {
  $item = 'convio_api_isUserInterested() called';
  myp($item);

    // place the call to the Convio server
    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl
    $api = convio_api_isUserInterested_call( $consid, $email, $format, $server, $apikey, $account, $pw  );
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }

    return $result;
}

function convio_api_listInterests_call( $include_hidden='' , $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  // CAPI 9
  $item = 'convio_api_listInterests_call() called';
  myp($item);

  /* https://secure2.convio.net/organization/site/SRConsAPI?method=listInterests
   * & api_key =value
   * [ & response_format =xml |json ]
   * & v =value [ & suppress_response_codes =value ]
   * & login_name=value &login_password=value
   * [&include_hidden=value ]
   */
    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=listInterests';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);
    if (!empty($include_hidden)) {
      $v_include_hidden = '&include_hidden='. $include_hidden;
      }
      else {
      $v_include_hidden = '';
      };

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_include_hidden ;
    return "$string";
}

function convio_api_listInterests($include_hidden='' , $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
    $item = 'convio_api_listIntersts() called';
    myp($item);
    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl verification
    $api = convio_api_listInterests_call( $include_hidden, $format, $server, $apikey, $account, $pw ); // call
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }
    return $result;
}

function convio_api_listUserFieldChoices_call( $mfield , $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  // CAPI 10
  $item = 'convio_api_listUserFieldChoices_call() called';
  myp($item);

  /* https://secure2.convio.net/organization/site/SRConsAPI?method=listUserFieldChoices
   * & api_key =value
   * [ & response_format =xml |json ]
   * & v =value [ & suppress_response_codes =value ]
   * &login_name=value &login_password=value
   * &field=value
   */
    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=listUserFieldChoices';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);
    if (empty($mfield)) {
      return "ERROR: convio_api_listUserFieldChoices_call() - field not provided";
      }
      else {
      $v_field = '&field='. $mfield;
      };

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_field ;
    return "$string";
}

function convio_api_listUserFieldChoices($mfield , $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
    $item = 'convio_api_listUserFieldChoices() called';
    myp($item);
    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl verification
    $api = convio_api_listUserFieldChoices_call( $mfield, $format, $server, $apikey, $account, $pw ); // call
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }
    return $result;
}

function convio_api_listUserFields_call( $access='' , $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  // CAPI 11
  $item = 'convio_api_listUserFields_call() called';
  myp($item);

  /* https://secure2.convio.net/organization/site/SRConsAPI?method=listUserFields
   * & api_key =value
   * [ & response_format =xml |json ]
   * & v =value [ & suppress_response_codes =value ]
   * & login_name =value & login_password =value
   * [ & access =view |update ]
   */
    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=listUserFields';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);
    !empty($access) ? $v_access = '&access='. $access : $v_access = '';

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_access ;
    return "$string";
}

function convio_api_listUserFields($access='' , $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
    $item = 'convio_api_listUserFields() called';
    myp($item);
    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl verification
    $api = convio_api_listUserFields_call( $access, $format, $server, $apikey, $account, $pw ); // call
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }
    return $result;
}

function convio_api_logInteraction_call( $primary_email='', $cons_id='', $member_id='',
                                         $interaction_subject , $interaction_body='', $interaction_cat_id='', $interaction_count='',
                                         $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  // CAPI 12
  // TBD - returning Bad Request - Your browser sent a request that this server could not understand. - The request line contained invalid characters following the protocol string.
  // NOT handling spaces

  $item = 'convio_api_logInteraction_call called';
  myp($item);

  /* https://secure2.convio.net/organization/site/SRConsAPI?method=logInteraction
   * & api_key =value
   * [ & response_format =xml |json ]
   * & v =value [ & suppress_response_codes =value ]
   * & login_name =value & login_password =value
   * [ & interaction_body =value ]
   * [ & interaction_cat_id =value ]
   * [ & interaction_count =value ]
   * & interaction_subject =value
   * [ & cons_id =value ]
   * [ & member_id =value ]
   * [ & primary_email =value ]
   */
    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=logInteraction';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);
    !empty($interaction_body) ? $v_interaction_body = '&interaction_body=\''. $interaction_body .'\'' : $v_interaction_body = '';  // this could take spaces and other special chars
    !empty($interaction_cat_id) ? $v_interaction_cat_id = '&interaction_cat_id='. $interaction_cat_id : $v_interaction_cat_id = '';
    !empty($interaction_count) ? $v_interaction_count = '&interaction_count='. $interaction_count : $v_interaction_count = '';

    if (empty($interaction_subject)) {
      return "ERROR: convio_api_logInteraction_call() - interaction_subject not provided";
      }
      else {
      $v_interaction_subject = '&interaction_subject=\''. $interaction_subject .'\''; // this could take spaces and other special chars
      };
    !empty($cons_id) ? $v_cons_id = '&cons_id='. $cons_id : $v_cons_id = '';
    !empty($member_id) ? $v_member_id = '&member_id='. $member_id : $v_member_id = '';
    !empty($primary_email) ? $v_primary_email = '&primary_email='. $primary_email : $v_primary_email = '';

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_interaction_body . $v_interaction_cat_id . $v_interaction_count
                        . $v_interaction_subject . $v_cons_id . $v_member_id . $v_primary_email;
    return "$string";
}

function convio_api_logInteraction( $primary_email='', $cons_id='', $member_id='',
                                         $interaction_subject , $interaction_body='', $interaction_cat_id='', $interaction_count='',
                                         $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
    $item = 'convio_api_logInteraction() called';
    myp($item);
    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl verification
    $api = convio_api_logInteraction_call( $primary_email, $cons_id, $member_id,
                                           $interaction_subject , $interaction_body, $interaction_cat_id, $interaction_count,
                                           $format , $server , $apikey , $account , $pw ); // call
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }
    return $result;
}

function convio_api_update_call( $primary_email='' , $cons_id='' , $member_id='' ,
                                         $add_center_ids='' , $add_group_ids='' , $add_interest_ids='' ,
                                         $remove_center_ids='' , $remove_group_ids='' , $remove_interest_ids='',
                                         $format='', $server='', $apikey='', $account='', $pw='' ) {
  // CAPI 13

  $item = 'convio_api_update_call called';
  myp($item);

  /* https://secure2.convio.net/organization/site/SRConsAPI?method=update
   * & api_key =value
   * [ & response_format =xml |json ]
   * & v =value [ & suppress_response_codes =value ]
   * & login_name =value & login_password =value
   * [ & cons_id =value ]
   * [ & member_id =value ]
   * & primary_email =value
   * [ & add_center_ids =value ]
   * [ & add_group_ids =value ]
   * [ & add_interest_ids =value]
   * [ & remove_center_ids =value ]
   * [ & remove_group_ids =value ]
   * [ & remove_interest_ids =value ]
   *
   */
    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=update';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);
    !empty($cons_id) ? $v_cons_id = '&cons_id='. $cons_id : $v_cons_id = '';
    !empty($member_id) ? $v_member_id = '&member_id='. $member_id : $v_member_id = '';
    !empty($primary_email) ? $v_primary_email = '&primary_email='. $primary_email : $v_primary_email = '';
    !empty($add_center_ids) ? $v_add_center_ids = '&add_center_ids='. $add_center_ids : $v_add_center_ids = '';
    !empty($add_group_ids) ? $v_add_group_ids = '&add_group_ids='. $add_group_ids : $v_add_group_ids = '';
    !empty($add_interest_ids) ? $v_add_interest_ids = '&add_interest_ids='. $add_interest_ids : $v_add_interest_ids = '';
    !empty($remove_center_ids) ? $v_remove_center_ids = '&remove_center_ids='. $remove_center_ids : $v_remove_center_ids = '';
    !empty($remove_group_ids) ? $v_remove_group_ids = '&remove_group_ids='. $remove_group_ids : $v_remove_group_ids ='';
    !empty($remove_interest_ids) ? $v_remove_interest_ids = '&remove_interest_ids='. $remove_interest_ids : $v_remove_interest_ids = '';

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_cons_id . $v_member_id . $v_primary_email
                        . $v_add_center_ids . $v_add_group_ids . $v_add_interest_ids . $v_remove_center_ids
                        . $v_remove_group_ids . $v_remove_interest_ids ;
    return "$string";
}

function convio_api_update( $primary_email='' , $cons_id='' , $member_id='' ,
                                         $add_center_ids='' , $add_group_ids='' , $add_interest_ids='' ,
                                         $remove_center_ids='' , $remove_group_ids='' , $remove_interest_ids='',
                                         $format='', $server='', $apikey='', $account='', $pw='') {
  $item = 'convio_api_update() called';
  myp($item);
    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl verification
    $api =  convio_api_update_call( $primary_email, $cons_id, $member_id,
                                         $add_center_ids, $add_group_ids, $add_interest_ids ,
                                         $remove_center_ids, $remove_group_ids, $remove_interest_ids,
                                         $format, $server, $apikey, $account, $pw );
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }

    return $result;
}

function _SSO_API() {
  // ONLY FOR THE OUTLINER
}


function convio_api_authenticateUser_call( $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  // SSOAPI 1
  $item = 'convio_api_authenticateUser_call() called';
  myp($item);

/*
 * https://secure2.convio.net/organization/site/SRConsAPI?method=authenticateUser
 * & api_key =value
 * [ & response_format =xml |json ]
 * & v =value [ & suppress_response_codes =value ]
 * & login_name=value &login_password=value
 */

    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=authenticateUser';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin;
    return "$string";
}

function convio_api_authenticateUser( $format='' , $server='' , $apikey='' , $account='' , $pw='') {
  $item = 'convio_api_authenticateUser() called';
  myp($item);

    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl
    $api = convio_api_authenticateUser_call( $format, $server, $apikey, $account, $pw  ); // call
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }

    return $result;
}


function convio_api_changePassword_call( $old_password, $user_password, $retype_password, $reminder_hint, $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  // SSOAPI 2
  $item = 'convio_api_changePassword_call() called';
  myp($item);

/*
 * https://secure2.convio.net/organization/site/SRConsAPI?method=changePassword
 * & api_key =value
 * [ & response_format =xml |json ]
 * & v =value [ & suppress_response_codes =value ]
 * & login_name=value &login_password=value
 * &old_password=value
 * &user_password=value
 * & retype_password=value
 * &reminder_hint=value
 */

    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=changePassword';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);

    if (empty($old_password)) {
      return "ERROR: convio_api_changePassword_call() - old_password not provided";
      }
      else {
      $v_old_password = '&old_password=\''. $old_password .'\''; //
      };

     if (empty($user_password)) {
      return "ERROR: convio_api_changePassword_call() - user_password not provided";
      }
      else {
      $v_user_password = '&user_password=\''. $user_password .'\''; //
      };

     if (empty($retype_password)) {
      return "ERROR: convio_api_changePassword_call() - retype_password not provided";
      }
      else {
      $v_retype_password = '&retype_password=\''. $retype_password .'\''; //
      };

     if (empty($reminder_hint)) {
      return "ERROR: convio_api_changePassword_call() - reminder_hint not provided";
      }
      else {
      $v_reminder_hint = '&reminder_hint=\''. urlencode($reminder_hint) .'\''; // this could take spaces and other special chars
      };

      //Check password for match and no spaces
     if (!($user_password == $retype_password)) {
      return "ERROR: convio_api_changePassword_call() - retype_password does not match user_password";
      } ;

      if (strstr($user_password, ' ')) {
      return "ERROR: convio_api_changePassword_call() - passwords can not contain spaces.";
      } ;

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_old_password . $v_user_password . $v_retype_password . $v_reminder_hint ;
    return "$string";
}

function convio_api_changePassword(  $old_password, $user_password, $retype_password, $reminder_hint, $format='' , $server='' , $apikey='' , $account='' , $pw='') {
  $item = 'convio_api_changePassword() called';
  myp($item);

    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl
    $api = convio_api_changePassword_call( $old_password, $user_password, $retype_password, $reminder_hint, $format , $server , $apikey, $account, $pw  ); // call
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }

    return $result;
}

function convio_api_getSingleSignOnToken_call( $cons_id ='' , $member_id ='' , $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  // SSOAPI 3
  $item = 'convio_api_getSingleSignOnToken_call() called';
  myp($item);

/*
 * https://secure2.convio.net/organization/site/SRConsAPI?method=getSingleSignOnToken
 * & api_key =value
 * [ & response_format =xml |json ]
 * & v =value [ & suppress_response_codes =value ]
 * &login_name=value &login_password=value
 * [&cons_id=value ]
 * [&member_id=value ]
 *
 */

    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=getSingleSignOnToken';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);

    if (empty($cons_id) && empty($member_id)) {
      return "ERROR: convio_api_getSingleSignOnToken_call() - Either the cons_id or member_id must be provided.";
      };

    !empty($cons_id) ? $v_cons_id = '&cons_id='. $cons_id : $v_cons_id = '';
    !empty($member_id) ? $v_member_id = '&member_id='. $member_id : $v_member_id = '';

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_cons_id . $v_member_id;
    return "$string";
}

function convio_api_getSingleSignOnToken(  $cons_id ='' , $member_id ='' , $format='' , $server='' , $apikey='' , $account='' , $pw='') {
  $item = 'convio_api_getSingleSignOnToken() called';
  myp($item);

    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl
    $api = convio_api_getSingleSignOnToken_call($cons_id , $member_id , $format , $server , $apikey , $account , $pw ); // call
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }

    return $result;
}

function convio_api_login_call( $user_name ='' , $password ='' , $send_user_name = '', $email = '', $logout = '',  $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  // SSOAPI 4
  $item = 'convio_api_login_call() called';
  myp($item);

/*
 * https://secure2.convio.net/organization/site/SRConsAPI?method=login
 * & api_key =value
 * [ & response_format =xml |json ]
 * & v =value [ & suppress_response_codes =value ]
 * & login_name =value & login_password =value
 * [ & user_name =value ]
 * [ & password =value ]
 * [ & send_user_name =value ]
 * [ & email =value ]
 * [ & logout =value ]
 *
 */

    $v_server = variable_get('convio_api_server', $server) .'/site/SRConsAPI?method=login';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);

    !empty($user_name) ? $v_user_name= '&user_name='. $user_name : $v_user_name = '';
    !empty($password) ? $v_password = '&password='. $password : $v_password = '';
    !empty($send_user_name) ? $v_send_user_name = '&send_user_name='. $send_user_name : $v_send_user_name = '';
    !empty($email) ? $v_email = '&email='. $email : $v_email = '';
    !empty($logout) ? $v_logout = '&logout='. $logout : $v_logout = '';

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_user_name . $v_password . $v_send_user_name . $v_email . $v_logout;
    return "$string";
}

function convio_api_login( $user_name ='' , $password ='' , $send_user_name = '', $email = '', $logout = '',  $format='' , $server='' , $apikey='' , $account='' , $pw='') {
  $item = 'convio_api_login() called';
  myp($item);

    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl
    $api = convio_api_login_call($user_name , $password, $send_user_name, $email, $logout,  $format , $server , $apikey , $account , $pw ); // call
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }

    return $result;
}

function _ADVOCACY_API() {
  // ONLY FOR THE OUTLINER
}

function convio_api_getAdvocacyAlerts_call( $list_record_offset ='' , $list_page_offset ='' , $issue_id = '', $alert_status, $alert_type, $publish = '' , $expire = '',
                                        $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  // AAPI 1
  $item = 'convio_getAdvocacyAlerts_call() called';
  myp($item);

/*
 * https://secure2.convio.net/organization/site/SRAdvocacyAPI?method=getAdvocacyAlerts
 * & api_key =value
 * [ & response_format =xml |json ]
 * & v =value [ & suppress_response_codes =value ]
 * & login_name =value & login_password =value
 * [ & list_record_offset =value ]
 * [ & list_page_offset =value ]
 * [ & list_page_size =value ]
 * [ & issue_id =value ]
 * & alert_status =DRAFT |SCHEDULED |ACTIVE |EXPIRED |ARCHIVED
 * & alert_type =ACTION |CALL |LTE |VOTE
 * [ &publish=value ]
 * [&expire=value ]
 *
 * TBD - BUG - SRAdvocacyAPI -> unknown servlet - SRConsAPI -> error code 6 - no method specified.
 */

    $v_server = variable_get('convio_api_server', $server) .'/site/SRAdvocacyAPI?method=getAdvocacyAlerts';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);

    !empty($list_record_offset) ? $v_list_record_offset= '&list_record_offset='. $list_record_offset : $v_list_record_offset = '';
    !empty($list_page_offset) ? $v_list_page_offset = '&list_page_offset='. $list_page_offset : $v_list_page_offset = '';
    !empty($issue_id) ? $v_issue_id = '&issue_id='. $issue_id : $v_issue_id = '';

    if (empty($alert_status)) {
      return "ERROR: convio_getAdvocacyAlerts_call() - alert_status not provided";
      }
      else {
      $v_alert_status = '&alert_status=\''. $alert_status .'\''; //
      };

    if (empty($alert_type)) {
      return "ERROR: convio_getAdvocacyAlerts_call() - alert_type not provided";
      }
      else {
      $v_alert_type = '&alert_type=\''. $alert_type .'\''; //
      };

    !empty($publish) ? $v_publish = '&publish='. $publish : $v_publish = '';
    !empty($expire) ? $v_expire = '&expire='. $expire : $v_expire = '';

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_list_record_offset . $v_list_page_offset . $v_issue_id . $v_alert_status
                        . $v_alert_type . $v_publish . $v_expire ;
    return "$string";
}

function convio_api_getAdvocacyAlerts( $list_record_offset ='' , $list_page_offset ='' , $issue_id = '', $alert_status, $alert_type, $publish = '' , $expire = '',
                                        $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  $item = 'convio_api_getAdvocacyAlerts() called';
  myp($item);

    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl
    $api = convio_api_getAdvocacyAlerts_call($list_record_offset , $list_page_offset , $issue_id, $alert_status, $alert_type, $publish , $expire,
                                        $format , $server , $apikey , $account , $pw ); // call
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }

    return $result;
}

function convio_api_getAdvocacyInteractions_call( $cons_id, $list_record_offset ='' , $list_page_offset ='' , $list_page_size = '', $issue_id = '',
                                        $format='' , $server='' , $apikey='' , $account='' , $pw='' ) {
  // AAPI 2
  $item = 'convio_getAdvocacyInteractions_call() called';
  myp($item);

/*
 * https://secure2.convio.net/organization/site/ SRAdvocacyAPI?method=getAdvocacyInteractions
 * & api_key =value
 * [ & response_format =xml |json ]
 * & v =value [ & suppress_response_codes =value ]
 * & login_name =value & login_password =value
 * [ & list_record_offset =value ]
 * [ & list_page_offset =value ]
 * [ & list_page_size=value ]
 * &cons_id=value
 * [&issue_id=value ]
 *
 * TBD - BUG - SRAdvocacyAPI -> unknown servlet - SRConsAPI -> error code 6 - no method specified.
 */

    $v_server = variable_get('convio_api_server', $server) .'/site/SRAdvocacyAPI?method=getAdvocacyInteractions';
    $v_apikey = '&api_key='. variable_get('convio_api_key', $apikey);
    empty($format) ? $v_format = '' : $v_format = '&response_format='. $format ;
    $v_options = '&v=1.0&suppress_response_codes=FALSE';
    $v_admin = '&login_name='. variable_get('convio_api_login_name', $account) .'&login_password='. variable_get('convio_api_login_password', $pw);

    !empty($list_record_offset) ? $v_list_record_offset= '&list_record_offset='. $list_record_offset : $v_list_record_offset = '';
    !empty($list_page_offset) ? $v_list_page_offset = '&list_page_offset='. $list_page_offset : $v_list_page_offset = '';
    !empty($list_page_size) ? $v_list_page_size = '&list_page_size='. $list_page_size : $v_list_page_size = '';

    if (empty($cons_id)) {
      return "ERROR: convio_api_getAdvocacyInteractions_call() - cons_id not provided";
      }
      else {
      $v_cons_id = '&cons_id=\''. $cons_id .'\'' ; //
      };

    !empty($issue_id) ? $v_issue_id = '&issue_id='. $issue_id : $v_issue_id = '';

    // build URL string
    $string = $v_server . $v_apikey . $v_format . $v_options . $v_admin . $v_list_record_offset . $v_list_page_offset
                        . $v_list_page_size . $v_cons_id . $v_issue_id ;
    return "$string";
}

function convio_api_getAdvocacyInteractions( $cons_id, $list_record_offset ='' , $list_page_offset ='' , $list_page_size = '', $issue_id = '',
                                        $format='' , $server='' , $apikey='' , $account='' , $pw=''  ) {
  $item = 'convio_api_getAdvocacyInteractions() called';
  myp($item);

    $ca_verify = variable_get('convio_api_ca_verification', FALSE); // turn off ssl
    $api = convio_api_getAdvocacyInteractions_call($cons_id, $list_record_offset, $list_page_offset , $list_page_size , $issue_id,
                                        $format , $server, $apikey , $account , $pw ); // call
    try {
         // create a new cURL resource and set to POST
        $ch = curl_init($api);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); // check
        if ($ca_verify == FALSE) curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // stop cURL from verifying the peer's certificate
        // grab URL and pass it to the browser
        $result[0] = curl_exec($ch);
        // close cURL resource, and free up system resources
        if ($result[0] == FALSE) {
           $httpcode = convio_api_http_status_code_string(curl_getinfo($ch, CURLINFO_HTTP_CODE), TRUE);
           $result[1] = 'CONNECTION ERROR - cURL: '. curl_errno($ch) .' '. curl_error($ch) .', HTTP: '. $httpcode;
        }
        else {
           $result[1] = NULL;
        }
        curl_close($ch);

    } catch (Exception $result) {
        drupal_set_message($result->getMessage(), 'error');
        watchdog('convio_api', 'Error: ', $result->getMessage(), 'WATCHDOG_ERROR');
    }

    return $result;
}

